#!/usr/bin/python3
"""
Pull OSTree commits into an existing repo

This stage pulls one or more commits, provided via
the `commits` input into an existing repository at
a location specified via `repo`.

If the returned a reference via `ref` it will use
that to pull the commits.
"""


import os
import subprocess
import sys

import osbuild.api

CAPABILITIES = ["CAP_MAC_ADMIN"]


SCHEMA_2 = """
"options": {
  "additionalProperties": false,
  "required": ["repo"],
  "properties": {
    "repo": {
      "description": "Location of the OSTree repo.",
      "type": "string"
    },
    "remote": {
      "description": "Add the 'remote' to the ref spec",
      "type": "string"
    }
  }
},
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "required": ["commits"],
  "properties": {
    "commits": {
      "type": "object",
      "additionalProperties": true
    }
  }
}
"""


def ostree(*args, _input=None, **kwargs):
    print(args)
    args = list(args) + [f'--{k}={v}' for k, v in kwargs.items()]
    print(args)
    print("ostree " + " ".join(args), file=sys.stderr)
    subprocess.run(['ostree'] + args,
                   encoding="utf8",
                   stdout=sys.stderr,
                   input=_input,
                   check=True)

def skopeo(*args, _input=None, **kwargs):
    args = list(args)
    print(args)
    print("skopeo " + " ".join(args), file=sys.stderr)
    subprocess.run(['skopeo'] + args,
                   encoding="utf8",
                   stdout=sys.stderr,
                   input=_input,
                   check=True)

def parse_input(inputs):
    commits = inputs["commits"]
    data = commits["data"]
    refs = data["refs"]
    assert refs, "Need at least one commit"
    return commits["path"], data["refs"]


# pylint: disable=too-many-statements
def main(tree, inputs, options):
    source_repo, commits = parse_input(inputs)
    repo = options["repo"]
    remote = options.get("remote")
    target = os.path.join(tree, repo.lstrip("/"))

    for commit, data in commits.items():
        ref = data.get("ref", commit)

        # extra_args = []
        # if remote:
        #     extra_args.append(f'--remote={remote}')

        extra_args = []
        if remote:
            extra_args.append(f'--imgref=containers-storage:[overlay@/run/osbuild/tree/usr/share/containers/storage+/run/containers/storage]localhost/fcos')
            extra_args.append(f'--stateroot=fedora-coreos')

        subprocess.run("ls")
        # stage_args = osbuild.api.arguments()
        # stage_args["tree"]
        # output = sys.argv[4]
        # repo_out = os.path.join(output, "repo")
        # subprocess.run(["sudo ostree container image deploy --imgref ostree-unverified-registry:quay.io/luyang/my-custom-fcos3 --sysroot " + os.path.join(tree, repo.lstrip("/"))],
        # subprocess.run("ostree container image deploy")

        # ostree("container image deploy", source_repo, ref,
        #        *extra_args,
        #        repo=target)

        # skopeo("copy", "docker://quay.io/fedora/fedora-coreos:testing-devel", "containers-storage:localhost/fcos",
        #        [],
        #        [])
        
        # args = ['copy', 'docker://quay.io/fedora/fedora-coreos:testing-devel', 'containers-storage:localhost/fcos']
        
        # podman run -v // mounting volumes
        # skopeo copy into an OCI archive
        

        # subprocess.run(['skopeo'] + args,
        #            encoding="utf8",
        #            stdout=sys.stderr,
        #            input=None,
        #            check=True)

        # we already pulled with skopeo, so just find

        # extra_args = []
        # extra_args.append("--src-tls-verify=false")

        # subprocess.run(["skopeo", "copy"] + extra_args + ['docker://quay.io/fedora/fedora-coreos:testing-devel', 'containers-storage:localhost/fcos'],
        #                 encoding="utf-8",
        #                 check=True)
        
        ostree("container", "image", "deploy",
               *extra_args,
               sysroot=f"{tree}")
               


if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["inputs"],
             stage_args["options"])
    sys.exit(r)
