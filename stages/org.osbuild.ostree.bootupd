#!/usr/bin/python3
"""
Bootupd stage
"""


import os
import sys
import subprocess

import osbuild.api
from osbuild.util import ostree, selinux

CAPABILITIES = ["CAP_MAC_ADMIN"]


SCHEMA = """
"additionalProperties": false,
"required": ["deployment"],
"properties": {
  "deployment": {
    "additionalProperties": false,
    "required": ["osname", "ref"],
    "properties": {
      "osname": {
        "description": "Name of the stateroot to be used in the deployment",
        "type": "string"
      },
      "ref": {
        "description": "OStree ref to create and use for deployment",
        "type": "string"
      },
      "serial": {
        "description": "The deployment serial (usually '0')",
        "type": "number",
        "default": 0
      }
    }
  }
}
"""

def install_uefi(tree, options):
    dep = options["deployment"]
    osname = dep["osname"]
    ref = dep["ref"]
    serial = dep.get("serial", 0)

    # stateroot = f"{tree}/ostree/deploy/{osname}"
    if not os.path.exists(tree + "/boot/efi"):
        os.makedirs(tree + "/boot/efi")
    
    # r = subprocess.run(["ls", "/dev"], check=True)
    # print(r.stdout)
    # return

    root = ostree.deployment_path(tree, osname, ref, serial)
    src_root = f"--src-root=\"{root}\""
    subprocess.run(["unshare", "-m", "/usr/bin/bootupctl", "backend", "install", src_root, tree], check=True)

#     unshare -m /usr/bin/bootupctl backend install --src-root="${deploy_root}" "${rootfs}"

#     local target_efi="$rootfs/boot/efi"
#     local grubefi
#     grubefi=$(find "${target_efi}/EFI/" -maxdepth 1 -type d | grep -v BOOT)
#     local vendor_id="${grubefi##*/}"
#     local vendordir="${target_efi}/EFI/${vendor_id}"
#     mkdir -p "${vendordir}"
#     cat > "${vendordir}/grub.cfg" << 'EOF'
# if [ -e (md/md-boot) ]; then
#   # The search command might pick a RAID component rather than the RAID,
#   # since the /boot RAID currently uses superblock 1.0.  See the comment in
#   # the main grub.cfg.
#   set prefix=md/md-boot
# else
#   if [ -f ${config_directory}/bootuuid.cfg ]; then
#     source ${config_directory}/bootuuid.cfg
#   fi
#   if [ -n "${BOOT_UUID}" ]; then
#     search --fs-uuid "${BOOT_UUID}" --set prefix --no-floppy
#   else
#     search --label boot --set prefix --no-floppy
#   fi
# fi
# set prefix=($prefix)/grub2
# configfile $prefix/grub.cfg
# boot
# EOF
#     install_grub_cfg
# }


def main(tree, options):
    install_uefi(tree, options)
    return 0


if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["options"])
    sys.exit(r)
